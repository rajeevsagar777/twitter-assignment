app.get("/user/following/", authenticationToken, async (request, response) => {
    let {
        username
    } = request;
    const getUserIdQuery = `select user_id from user where username='${username}';`;
    const getUserId = await database.get(getUserIdQuery);
    // console.log(getUserId);
    const getFollowerIdsQuery = `select following_user_id from follower 
    where follower_user_id=${getUserId.user_id};`;
    const getFollowerIdsArray = await database.all(getFollowerIdsQuery);
    //console.log(getFollowerIdsArray);
    const getFollowerIds = getFollowerIdsArray.map((eachUser) => {
        return eachUser.following_user_id;
    });
    //console.log(`${getFollowerIds}`);
    const getFollowersResultQuery = `select name from user where user_id in (${getFollowerIds});`;
    const responseResult = await database.all(getFollowersResultQuery);
    //console.log(responseResult);
    response.send(responseResult);
});

//api 6
const api6Output = (tweetData, likesCount, replyCount) => {
    return {
        tweet: tweetData.tweet,
        likes: likesCount.likes,
        replies: replyCount.replies,
        dateTime: tweetData.date_time,
    };
};

app.get("/tweets/:tweetId/", authenticationToken, async (request, response) => {
    const {
        tweetId
    } = request.params;
    //console.log(tweetId);
    let {
        username
    } = request;
    const getUserIdQuery = `select user_id from user where username='${username}';`;
    const getUserId = await database.get(getUserIdQuery);
    // console.log(getUserId);
    //get the ids of whom the use is following
    const getFollowingIdsQuery = `select following_user_id from follower where follower_user_id=${getUserId.user_id};`;
    const getFollowingIdsArray = await database.all(getFollowingIdsQuery);
    //console.log(getFollowingIdsArray);
    const getFollowingIds = getFollowingIdsArray.map((eachFollower) => {
        return eachFollower.following_user_id;
    });
    //console.log(getFollowingIds);
    //get the tweets made by the users he is following
    const getTweetIdsQuery = `select tweet_id from tweet where user_id in (${getFollowingIds});`;
    const getTweetIdsArray = await database.all(getTweetIdsQuery);
    const followingTweetIds = getTweetIdsArray.map((eachId) => {
        return eachId.tweet_id;
    });
    // console.log(followingTweetIds);
    //console.log(followingTweetIds.includes(parseInt(tweetId)));
    if (followingTweetIds.includes(parseInt(tweetId))) {
        const likes_count_query = `select count(user_id) as likes from like where tweet_id=${tweetId};`;
        const likes_count = await database.get(likes_count_query);
        //console.log(likes_count);
        const reply_count_query = `select count(user_id) as replies from reply where tweet_id=${tweetId};`;
        const reply_count = await database.get(reply_count_query);
        // console.log(reply_count);
        const tweet_tweetDateQuery = `select tweet, date_time from tweet where tweet_id=${tweetId};`;
        const tweet_tweetDate = await database.get(tweet_tweetDateQuery);
        //console.log(tweet_tweetDate);
        response.send(api6Output(tweet_tweetDate, likes_count, reply_count));
    } else {
        response.status(401);
        response.send("Invalid Request");
        console.log("Invalid Request");
    }
});